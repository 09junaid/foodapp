{
  "openapi": "3.0.0",
  "info": {
    "title": "Restaurant API",
    "version": "1.0.0",
    "description": "Fast food restaurant backend API"
  },
  "servers": [
    {
      "url": "http://localhost:5000"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "paths": {
    "/api/v1/auth/signup": {
      "post": {
        "summary": "Register a new user",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password"],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Bad request (missing fields or user already exists)"
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "summary": "User login",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "summary": "Logout user",
        "tags": ["Auth"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logged out successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated"
          }
        }
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "summary": "Get current logged-in user",
        "tags": ["Auth"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User info fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "john@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Token missing or invalid"
          }
        }
      }
    },
    "/api/v1/booking/create-booking": {
      "post": {
        "summary": "Create a new table booking",
        "tags": ["Booking"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "booking_date",
                  "booking_time",
                  "seating_capacity"
                ],
                "properties": {
                  "booking_date": {
                    "type": "string",
                    "format": "date",
                    "example": "2025-05-07"
                  },
                  "booking_time": {
                    "type": "string",
                    "format": "time",
                    "example": "12:30"
                  },
                  "seating_capacity": {
                    "type": "integer",
                    "example": 4
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking created successfully"
          },
          "400": {
            "description": "Invalid input data"
          }
        }
      }
    },
    "/api/v1/booking/get-all-booking": {
      "get": {
        "summary": "Get all bookings",
        "tags": ["Booking"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all bookings"
          }
        }
      }
    },
    "/api/v1/booking/get-booking-by/{id}": {
      "get": {
        "summary": "Get a booking by ID",
        "tags": ["Booking"],
        "security":[
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking found"
          },
          "404": {
            "description": "Booking not found"
          }
        }
      }
    },
    "/api/v1/booking/update-booking/{id}": {
      "put": {
        "summary": "Update a booking by ID",
        "tags": ["Booking"],
        "security":[
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "booking_date": {
                    "type": "string",
                    "format": "date",
                    "example": "2025-05-05T00:00:00.000Z"
                  },
                  "booking_time": {
                    "type": "string",
                    "format": "time",
                    "example": "2025-05-05T04:00:00.000Z"
                  },
                  "seating_capacity": {
                    "type": "integer",
                    "example": 6
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking updated successfully"
          },
          "404": {
            "description": "Booking not found"
          }
        }
      }
    },
    "/api/v1/booking/delete-booking/{id}": {
      "delete": {
        "summary": "Delete a booking by ID",
        "tags": ["Booking"],
        "security":[
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking deleted successfully"
          },
          "404": {
            "description": "Booking not found"
          }
        }
      }
    },
     "/api/v1/order/create-order": {
    "post": {
      "summary": "Create a new order",
      "tags": ["Order"],
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "customer_name",
                "phone_number",
                "food_items",
                "address",
                "order_date",
                "quantity"
              ],
              "properties": {
                "customer_name": {
                  "type": "string",
                  "example": "Ali Khan"
                },
                "phone_number": {
                  "type": "string",
                  "example": "+923001234567"
                },
                "message": {
                  "type": "string",
                  "example": "Please deliver fast"
                },
                "additional_note": {
                  "type": "string",
                  "example": "Be careful with the packaging"
                },
                "address": {
                  "type": "string",
                  "example": "123 Street, Lahore"
                },
                "food_items": {
                  "type":"string",
                  "example": "Burger, Pizza, Salad"
                },
                "order_date": {
                  "type": "string",
                  "format": "date",
                  "example": "2025-05-07"
                },
                "quantity": {
                  "type": "integer",
                  "example": 4
                }
              }
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Order created successfully"
        },
        "400": {
          "description": "Bad request"
        }
      }
    }
  },
  "/api/v1/order/get-all": {
    "get": {
      "summary": "Get all orders",
      "tags": ["Order"],
      "security":[
          {
            "bearerAuth": []
          }
        ],
      "responses": {
        "200": {
          "description": "List of all orders"
        }
      }
    }
  },
  "/api/v1/order/get-order/{id}": {
    "get": {
      "summary": "Get a specific order by ID",
      "tags": ["Order"],
      "security":[
          {
            "bearerAuth": []
          }
        ],
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "integer",
            "example": 1
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Order found"
        },
        "404": {
          "description": "Order not found"
        }
      }
    }
  },
  "/api/v1/order/update-order/{id}": {
    "put": {
      "summary": "Update an existing order by ID",
      "tags": ["Order"],
      "security":[
          {
            "bearerAuth": []
          }
        ],
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "integer",
            "example": 1
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "customer_name": {
                  "type": "string",
                  "example": "Ali Khan"
                },
                "phone_number": {
                  "type": "string",
                  "example": "+923001234567"
                },
                "message": {
                  "type": "string",
                  "example": "Please deliver fast"
                },
                "additional_note": {
                  "type": "string",
                  "example": "Be careful with the packaging"
                },
                "address": {
                  "type": "string",
                  "example": "123 Street, Lahore"
                },
                "food_items": {
                  "type":"string",
                  "example": "Burger, Pizza, Salad"
                },
                "order_date": {
                  "type": "string",
                  "format": "date",
                  "example": "2025-05-05T00:00:00.000Z"
                },
                "quantity": {
                  "type": "integer",
                  "example": 4
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Order updated successfully"
        },
        "404": {
          "description": "Order not found"
        }
      }
    }
  },
  "/api/v1/order/delete-order/{id}": {
    "delete": {
      "summary": "Delete an order by ID",
      "tags": ["Order"],
      "security":[
          {
            "bearerAuth": []
          }
        ],
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "integer",
            "example": 1
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Order deleted successfully"
        },
        "404": {
          "description": "Order not found"
        }
      }
    }
  }
  }
}
